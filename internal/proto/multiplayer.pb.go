// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: multiplayer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to query multiplayer mode usage
type ModeUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode string `protobuf:"bytes,1,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"` // The 3-digit area code
}

func (x *ModeUsageRequest) Reset() {
	*x = ModeUsageRequest{}
	mi := &file_multiplayer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeUsageRequest) ProtoMessage() {}

func (x *ModeUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeUsageRequest.ProtoReflect.Descriptor instead.
func (*ModeUsageRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{0}
}

func (x *ModeUsageRequest) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

// Response containing mode usage information
type ModeUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modes []*ModeUsage `protobuf:"bytes,1,rep,name=modes,proto3" json:"modes,omitempty"` // List of mode usages
}

func (x *ModeUsageResponse) Reset() {
	*x = ModeUsageResponse{}
	mi := &file_multiplayer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeUsageResponse) ProtoMessage() {}

func (x *ModeUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeUsageResponse.ProtoReflect.Descriptor instead.
func (*ModeUsageResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{1}
}

func (x *ModeUsageResponse) GetModes() []*ModeUsage {
	if x != nil {
		return x.Modes
	}
	return nil
}

// A single mode usage record
type ModeUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName    string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`           // Name of the multiplayer mode
	ActiveUsers int32  `protobuf:"varint,2,opt,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"` // Number of active users in this mode
	AreaCode    string `protobuf:"bytes,3,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`           // The area code for the game mode
}

func (x *ModeUsage) Reset() {
	*x = ModeUsage{}
	mi := &file_multiplayer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeUsage) ProtoMessage() {}

func (x *ModeUsage) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeUsage.ProtoReflect.Descriptor instead.
func (*ModeUsage) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{2}
}

func (x *ModeUsage) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *ModeUsage) GetActiveUsers() int32 {
	if x != nil {
		return x.ActiveUsers
	}
	return 0
}

func (x *ModeUsage) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

// New request to get detailed mode information
type ModeDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"` // The mode name
}

func (x *ModeDetailsRequest) Reset() {
	*x = ModeDetailsRequest{}
	mi := &file_multiplayer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeDetailsRequest) ProtoMessage() {}

func (x *ModeDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeDetailsRequest.ProtoReflect.Descriptor instead.
func (*ModeDetailsRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{3}
}

func (x *ModeDetailsRequest) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

// Response for mode details
type ModeDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName    string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                     // Description of the game mode
	ActiveUsers int32  `protobuf:"varint,3,opt,name=active_users,json=activeUsers,proto3" json:"active_users,omitempty"` // Number of active users in this mode
	AreaCode    string `protobuf:"bytes,4,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`           // Area code for the mode
}

func (x *ModeDetailsResponse) Reset() {
	*x = ModeDetailsResponse{}
	mi := &file_multiplayer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeDetailsResponse) ProtoMessage() {}

func (x *ModeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeDetailsResponse.ProtoReflect.Descriptor instead.
func (*ModeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{4}
}

func (x *ModeDetailsResponse) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *ModeDetailsResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModeDetailsResponse) GetActiveUsers() int32 {
	if x != nil {
		return x.ActiveUsers
	}
	return 0
}

func (x *ModeDetailsResponse) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

// Request to get active users by area code
type ActiveUsersByAreaCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode string `protobuf:"bytes,1,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"` // The area code
}

func (x *ActiveUsersByAreaCodeRequest) Reset() {
	*x = ActiveUsersByAreaCodeRequest{}
	mi := &file_multiplayer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveUsersByAreaCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveUsersByAreaCodeRequest) ProtoMessage() {}

func (x *ActiveUsersByAreaCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveUsersByAreaCodeRequest.ProtoReflect.Descriptor instead.
func (*ActiveUsersByAreaCodeRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{5}
}

func (x *ActiveUsersByAreaCodeRequest) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

// Response for active users by area code
type ActiveUsersByAreaCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalActiveUsers int32 `protobuf:"varint,1,opt,name=total_active_users,json=totalActiveUsers,proto3" json:"total_active_users,omitempty"` // Total active users for the given area code
}

func (x *ActiveUsersByAreaCodeResponse) Reset() {
	*x = ActiveUsersByAreaCodeResponse{}
	mi := &file_multiplayer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveUsersByAreaCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveUsersByAreaCodeResponse) ProtoMessage() {}

func (x *ActiveUsersByAreaCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveUsersByAreaCodeResponse.ProtoReflect.Descriptor instead.
func (*ActiveUsersByAreaCodeResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{6}
}

func (x *ActiveUsersByAreaCodeResponse) GetTotalActiveUsers() int32 {
	if x != nil {
		return x.TotalActiveUsers
	}
	return 0
}

// Request to get game mode statistics
type GameModeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameModeStatsRequest) Reset() {
	*x = GameModeStatsRequest{}
	mi := &file_multiplayer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameModeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameModeStatsRequest) ProtoMessage() {}

func (x *GameModeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameModeStatsRequest.ProtoReflect.Descriptor instead.
func (*GameModeStatsRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{7}
}

type GameModeStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalModes       int32 `protobuf:"varint,1,opt,name=total_modes,json=totalModes,proto3" json:"total_modes,omitempty"`                     // Total number of modes
	TotalActiveUsers int32 `protobuf:"varint,2,opt,name=total_active_users,json=totalActiveUsers,proto3" json:"total_active_users,omitempty"` // Total active users across all modes
}

func (x *GameModeStatsResponse) Reset() {
	*x = GameModeStatsResponse{}
	mi := &file_multiplayer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameModeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameModeStatsResponse) ProtoMessage() {}

func (x *GameModeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameModeStatsResponse.ProtoReflect.Descriptor instead.
func (*GameModeStatsResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{8}
}

func (x *GameModeStatsResponse) GetTotalModes() int32 {
	if x != nil {
		return x.TotalModes
	}
	return 0
}

func (x *GameModeStatsResponse) GetTotalActiveUsers() int32 {
	if x != nil {
		return x.TotalActiveUsers
	}
	return 0
}

type TotalActiveUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TotalActiveUsersRequest) Reset() {
	*x = TotalActiveUsersRequest{}
	mi := &file_multiplayer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalActiveUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalActiveUsersRequest) ProtoMessage() {}

func (x *TotalActiveUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalActiveUsersRequest.ProtoReflect.Descriptor instead.
func (*TotalActiveUsersRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{9}
}

type TotalActiveUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalActiveUsers int32 `protobuf:"varint,1,opt,name=totalActiveUsers,proto3" json:"totalActiveUsers,omitempty"`
}

func (x *TotalActiveUsersResponse) Reset() {
	*x = TotalActiveUsersResponse{}
	mi := &file_multiplayer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalActiveUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalActiveUsersResponse) ProtoMessage() {}

func (x *TotalActiveUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalActiveUsersResponse.ProtoReflect.Descriptor instead.
func (*TotalActiveUsersResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{10}
}

func (x *TotalActiveUsersResponse) GetTotalActiveUsers() int32 {
	if x != nil {
		return x.TotalActiveUsers
	}
	return 0
}

// Define the request and response for joining a mode
type JoinModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // Player ID or Name
}

func (x *JoinModeRequest) Reset() {
	*x = JoinModeRequest{}
	mi := &file_multiplayer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinModeRequest) ProtoMessage() {}

func (x *JoinModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinModeRequest.ProtoReflect.Descriptor instead.
func (*JoinModeRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{11}
}

func (x *JoinModeRequest) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *JoinModeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type JoinModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JoinModeResponse) Reset() {
	*x = JoinModeResponse{}
	mi := &file_multiplayer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinModeResponse) ProtoMessage() {}

func (x *JoinModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinModeResponse.ProtoReflect.Descriptor instead.
func (*JoinModeResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{12}
}

func (x *JoinModeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Define the request and response for leaving a mode
type LeaveModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *LeaveModeRequest) Reset() {
	*x = LeaveModeRequest{}
	mi := &file_multiplayer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveModeRequest) ProtoMessage() {}

func (x *LeaveModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveModeRequest.ProtoReflect.Descriptor instead.
func (*LeaveModeRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{13}
}

func (x *LeaveModeRequest) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *LeaveModeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type LeaveModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LeaveModeResponse) Reset() {
	*x = LeaveModeResponse{}
	mi := &file_multiplayer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveModeResponse) ProtoMessage() {}

func (x *LeaveModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveModeResponse.ProtoReflect.Descriptor instead.
func (*LeaveModeResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{14}
}

func (x *LeaveModeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to fetch players in a mode
type GetPlayersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
}

func (x *GetPlayersRequest) Reset() {
	*x = GetPlayersRequest{}
	mi := &file_multiplayer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayersRequest) ProtoMessage() {}

func (x *GetPlayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayersRequest.ProtoReflect.Descriptor instead.
func (*GetPlayersRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{15}
}

func (x *GetPlayersRequest) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

type GetPlayersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"` // List of player IDs or names
}

func (x *GetPlayersResponse) Reset() {
	*x = GetPlayersResponse{}
	mi := &file_multiplayer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayersResponse) ProtoMessage() {}

func (x *GetPlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayersResponse.ProtoReflect.Descriptor instead.
func (*GetPlayersResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{16}
}

func (x *GetPlayersResponse) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

// Request to update the game state of a mode
type UpdateGameStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeName  string `protobuf:"bytes,1,opt,name=mode_name,json=modeName,proto3" json:"mode_name,omitempty"`
	GameState string `protobuf:"bytes,2,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"` // New game state (e.g., active, paused, ended)
}

func (x *UpdateGameStateRequest) Reset() {
	*x = UpdateGameStateRequest{}
	mi := &file_multiplayer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameStateRequest) ProtoMessage() {}

func (x *UpdateGameStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateGameStateRequest) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateGameStateRequest) GetModeName() string {
	if x != nil {
		return x.ModeName
	}
	return ""
}

func (x *UpdateGameStateRequest) GetGameState() string {
	if x != nil {
		return x.GameState
	}
	return ""
}

type UpdateGameStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateGameStateResponse) Reset() {
	*x = UpdateGameStateResponse{}
	mi := &file_multiplayer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGameStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameStateResponse) ProtoMessage() {}

func (x *UpdateGameStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateGameStateResponse) Descriptor() ([]byte, []int) {
	return file_multiplayer_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateGameStateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_multiplayer_proto protoreflect.FileDescriptor

var file_multiplayer_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0x2f, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x41, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x31,
	0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x15,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2d, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x30, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xac, 0x06, 0x0a,
	0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2d, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multiplayer_proto_rawDescOnce sync.Once
	file_multiplayer_proto_rawDescData = file_multiplayer_proto_rawDesc
)

func file_multiplayer_proto_rawDescGZIP() []byte {
	file_multiplayer_proto_rawDescOnce.Do(func() {
		file_multiplayer_proto_rawDescData = protoimpl.X.CompressGZIP(file_multiplayer_proto_rawDescData)
	})
	return file_multiplayer_proto_rawDescData
}

var file_multiplayer_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_multiplayer_proto_goTypes = []any{
	(*ModeUsageRequest)(nil),              // 0: multiplayer.ModeUsageRequest
	(*ModeUsageResponse)(nil),             // 1: multiplayer.ModeUsageResponse
	(*ModeUsage)(nil),                     // 2: multiplayer.ModeUsage
	(*ModeDetailsRequest)(nil),            // 3: multiplayer.ModeDetailsRequest
	(*ModeDetailsResponse)(nil),           // 4: multiplayer.ModeDetailsResponse
	(*ActiveUsersByAreaCodeRequest)(nil),  // 5: multiplayer.ActiveUsersByAreaCodeRequest
	(*ActiveUsersByAreaCodeResponse)(nil), // 6: multiplayer.ActiveUsersByAreaCodeResponse
	(*GameModeStatsRequest)(nil),          // 7: multiplayer.GameModeStatsRequest
	(*GameModeStatsResponse)(nil),         // 8: multiplayer.GameModeStatsResponse
	(*TotalActiveUsersRequest)(nil),       // 9: multiplayer.TotalActiveUsersRequest
	(*TotalActiveUsersResponse)(nil),      // 10: multiplayer.TotalActiveUsersResponse
	(*JoinModeRequest)(nil),               // 11: multiplayer.JoinModeRequest
	(*JoinModeResponse)(nil),              // 12: multiplayer.JoinModeResponse
	(*LeaveModeRequest)(nil),              // 13: multiplayer.LeaveModeRequest
	(*LeaveModeResponse)(nil),             // 14: multiplayer.LeaveModeResponse
	(*GetPlayersRequest)(nil),             // 15: multiplayer.GetPlayersRequest
	(*GetPlayersResponse)(nil),            // 16: multiplayer.GetPlayersResponse
	(*UpdateGameStateRequest)(nil),        // 17: multiplayer.UpdateGameStateRequest
	(*UpdateGameStateResponse)(nil),       // 18: multiplayer.UpdateGameStateResponse
}
var file_multiplayer_proto_depIdxs = []int32{
	2,  // 0: multiplayer.ModeUsageResponse.modes:type_name -> multiplayer.ModeUsage
	0,  // 1: multiplayer.MultiplayerService.GetModeUsage:input_type -> multiplayer.ModeUsageRequest
	9,  // 2: multiplayer.MultiplayerService.GetTotalActiveUsers:input_type -> multiplayer.TotalActiveUsersRequest
	3,  // 3: multiplayer.MultiplayerService.GetModeDetails:input_type -> multiplayer.ModeDetailsRequest
	5,  // 4: multiplayer.MultiplayerService.GetActiveUsersByAreaCode:input_type -> multiplayer.ActiveUsersByAreaCodeRequest
	7,  // 5: multiplayer.MultiplayerService.GetGameModeStats:input_type -> multiplayer.GameModeStatsRequest
	11, // 6: multiplayer.MultiplayerService.JoinMode:input_type -> multiplayer.JoinModeRequest
	13, // 7: multiplayer.MultiplayerService.LeaveMode:input_type -> multiplayer.LeaveModeRequest
	15, // 8: multiplayer.MultiplayerService.GetPlayers:input_type -> multiplayer.GetPlayersRequest
	17, // 9: multiplayer.MultiplayerService.UpdateGameState:input_type -> multiplayer.UpdateGameStateRequest
	1,  // 10: multiplayer.MultiplayerService.GetModeUsage:output_type -> multiplayer.ModeUsageResponse
	10, // 11: multiplayer.MultiplayerService.GetTotalActiveUsers:output_type -> multiplayer.TotalActiveUsersResponse
	4,  // 12: multiplayer.MultiplayerService.GetModeDetails:output_type -> multiplayer.ModeDetailsResponse
	6,  // 13: multiplayer.MultiplayerService.GetActiveUsersByAreaCode:output_type -> multiplayer.ActiveUsersByAreaCodeResponse
	8,  // 14: multiplayer.MultiplayerService.GetGameModeStats:output_type -> multiplayer.GameModeStatsResponse
	12, // 15: multiplayer.MultiplayerService.JoinMode:output_type -> multiplayer.JoinModeResponse
	14, // 16: multiplayer.MultiplayerService.LeaveMode:output_type -> multiplayer.LeaveModeResponse
	16, // 17: multiplayer.MultiplayerService.GetPlayers:output_type -> multiplayer.GetPlayersResponse
	18, // 18: multiplayer.MultiplayerService.UpdateGameState:output_type -> multiplayer.UpdateGameStateResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_multiplayer_proto_init() }
func file_multiplayer_proto_init() {
	if File_multiplayer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multiplayer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multiplayer_proto_goTypes,
		DependencyIndexes: file_multiplayer_proto_depIdxs,
		MessageInfos:      file_multiplayer_proto_msgTypes,
	}.Build()
	File_multiplayer_proto = out.File
	file_multiplayer_proto_rawDesc = nil
	file_multiplayer_proto_goTypes = nil
	file_multiplayer_proto_depIdxs = nil
}
